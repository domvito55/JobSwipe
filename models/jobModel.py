# -*- config: utf-8 -*-
"""
File Name: jobModel.py
Description: This script defines the seeker model for representing and managing
 job data in the application.
Author: MathTeixeira
Date: October 10, 2024
Version: 3.0.0
License: MIT License
Contact Information: mathteixeira55
"""

### imports ###
from datetime import datetime
from typing import Dict, List
from pydantic import model_validator
from sqlalchemy import JSON
from sqlmodel import Field, SQLModel, Column, VARCHAR

from schemas.skillSchema import SkillSchema
from schemas.jobInfoSchema import JobInfoSchema


class Job(SQLModel):
  """
  Seeker model class for representing and managing seeker data in the application.

  Attributes:
    id (str): The job unique identifier.
    userId (str): The user Id.
    jobTitle (str): The job title.
    status (Dict[str, List[str]]): The status of the job.
    jobInfo (JobInfoSchema): The job information.
    primarySkills (Dict[str, List[SkillSchema]]): Primary skills, divided into technical and transferable skills.
    secondarySkills (Dict[str, List[SkillSchema]]): Secondary skills, divided into technical and transferable skills.
    createdDate (date): Starting date of the
    updatedDate (date): Last date of the update

    TODO:
    add appliedDate
    add salaraies ranged optional
    add date of expiry

  """
  # _id: autogenerated by the database
  id: str | None = Field(
    default=None,
    alias="_id"
  )
  # userId: { type: str, required: true }
  userId: str = Field(
    ...,
    sa_column=Column("userId", VARCHAR, index=True),
    description="The user Id"
  )
    # jobTitle: { type: String, required: true,
  #     description: "The job title" },
  jobTitle: str = Field(
    ...,
    sa_column=Column("jobTitle", VARCHAR, index=True),
    description="The job title"
  )

  # status: { type: dict[str, List[str]], required: true }
  status: Dict[str, List[str]] = Field(
      default={
          "applied": [],
          "rejected": [],
          "accepted": [],
          "declined": []
        },
      sa_column=Column(JSON),
      description="The status of the job"
  )
  # jobInfo: { type: JobInfoSchema }
  jobInfo: None | JobInfoSchema = Field(
      default=None,
      sa_column=Column(JSON),
      description="The Job information"
  )
  # primarySkills: {
  #     required: true,
  #     technicalSkills: {
  #         type: [SkillSchema],
  #         validate: [skillsLimit, '{PATH} must have between 3 and 5 entries']
  #     },
  #     transferableSkills: {
  #         type: [SkillSchema],
  #         validate: [skillsLimit, '{PATH} must have between 3 and 5 entries']
  #     }
  # }
  # TODO: Make it required again!!! And activate validation
  primarySkills: None | Dict[str, List[SkillSchema]] = Field(
      default=None,
      sa_column=Column(JSON),
      description=
      "Primary skills, divided into technical and transferable skills"
  )
  # secondarySkills: {
  #     required: true,
  #     technicalSkills: {
  #         type: [SkillSchema],
  #         validate: [skillsLimit, '{PATH} must have between 3 and 5 entries']
  #     },
  #     transferableSkills: {
  #         type: [SkillSchema],
  #         validate: [skillsLimit, '{PATH} must have between 3 and 5 entries']
  #     }
  # }
  secondarySkills: None | Dict[str, List[SkillSchema]] = Field(
      default=None,
      sa_column=Column(JSON),
      description=
      "Secondary skills, divided into technical and transferable skills"
  )
  # education:
  ### TODO: Add educationList it will be different from the seeker.

  # created_date: {
  #     type: date,
  #     default: Date.today,
  #     description: "When was this entry created? Automatically generated."
  # }
  createdDate: datetime = Field(default_factory=datetime.now,
                            description="Date of the creation of the job"
  )
  updatedDate: datetime = Field(default_factory=datetime.now,
                            description="Date of the last update of the job"
  )

  # # Validate that each list in primarySkills has between 3 and 5 entries
  # @model_validator(mode='after')
  # def validate_skills_limit(cls, values):
  #   for skill_type in ['primarySkills']:  #, 'secondarySkills']:
  #     skills_dict = getattr(values, skill_type, {})
  #     for key in ['technicalSkills', 'transferableSkills']:
  #       skills = skills_dict.get(key, [])
  #       if not (3 <= len(skills) <= 5):
  #         print(f"{key} in {skill_type} must have between 3 and 5 entries")
  #         raise ValueError(
  #             f"{key} in {skill_type} must have between 3 and 5 entries")
  #   return values

  class Config:
    json_schema_extra = {
        "example": {
            "userId":
                "6733aec175eb0fba49f14363",
            "jobTitle":
                "Software Engineer",
            "jobInfo": {
                "jobDescription":
                    "We are looking for a software engineer to join our team.",
                "email":
                    "job@company.com",
                "phone":
                    5551234567,
                "street":
                    "10880 Malibu Point",
                "city":
                    "Malibu",
                "province":
                    "California",
                "postalCode":
                    "90265",
                "country":
                    "USA"
            },
            "primarySkills": {
                "technicalSkills": [
                    {
                        "skillName": "Engineering",
                        "proficiencyLevel": "Expert",  # TODO Make it int
                        "yearsOfExperience": 25
                    },
                    {
                        "skillName": "Artificial Intelligence",
                        "proficiencyLevel": "Expert",
                        "yearsOfExperience": 15
                    },
                    {
                        "skillName": "Materials Science",
                        "proficiencyLevel": "Expert",
                        "yearsOfExperience": 12
                    }
                ],
                "transferableSkills": [{
                    "skillName": "Leadership",
                    "proficiencyLevel": "Expert",
                    "yearsOfExperience": 20
                }, {
                    "skillName": "Innovation",
                    "proficiencyLevel": "Expert",
                    "yearsOfExperience": 18
                }, {
                    "skillName": "Project Management",
                    "proficiencyLevel": "Expert",
                    "yearsOfExperience": 15
                }, {
                    "skillName": "Crisis Managementn",
                    "proficiencyLevel": "Expert",
                    "yearsOfExperience": 10
                }, {
                    "skillName": "Public Speaking",
                    "proficiencyLevel": "Expert",
                    "yearsOfExperience": 8
                }]
            },
            "secondarySkills": {
                "technicalSkills": [{
                    "skillName": "Software Development",
                    "proficiencyLevel": "Intermediate",
                    "yearsOfExperience": 10
                }],
                "transferableSkills": [{
                    "skillName": "Teamwork",
                    "proficiencyLevel": "Intermediate",
                    "yearsOfExperience": 5
                }]
            },
            "createdDate": "2024-11-12T00:00:00",
            "updatedDate": "2024-11-12T00:00:00"
        }
    }
