# -*- config: utf-8 -*-
"""
File Name: userModel.py
Description: This script defines the user model for representing and managing
 user data in the application.
Author: MathTeixeira
Date: September 23, 2024
Version: 3.0.0
License: MIT License
Contact Information: mathteixeira55
"""

### imports ###
from datetime import date
from typing import Dict, List
from sqlalchemy import JSON
from sqlmodel import Field, SQLModel, Column, VARCHAR
from passlib.context import CryptContext


class User(SQLModel):
  """
  User model class for representing and managing user data in the application.

  Attributes:
    id (str): The user unique identifier.
    username (str): The username of the user.
    passwordHash (str): The hashed password of the user.
    role (str): The role user or recruiter.
    createdDate (date): Starting date

    TODO:
    updatedDate (date): Starting date
    personalInfo (PersonalInfoSchema): The user personal information.
  """
  # _id: autogenerated by the database
  id: str | None = Field(
    default=None,
    alias="_id"
  )
  # username: { type: str, required: true },
  username: str = Field(
      ...,
      sa_column=Column("username", VARCHAR, unique=True, index=True),
      description="The username of the user")
  # encripted password: { type: str, required: true },
  passwordHash: str = Field("", description="The hashed password of the user")
  # role: { type: str, required: true}
  role: str = Field(..., description="The role: user or recruiter")
  # createdDate: { type: Date, default: Date.now },
  createdDate: date = Field(default_factory=date.today,
                            description="Starting date of the education")

  def setPasswrod(self, password: str) -> None:
    """
    Set the password hash for the user.

    Args:
      password (str): The password to hash and store for the user.
    """
    passContext = CryptContext(schemes=["bcrypt"])
    self.passwordHash = passContext.hash(password)

  def verifyPassword(self, password: str) -> bool:
    """
    Verify the password for the user.

    Args:
      password (str): The password to verify against the stored hash.

    Returns:
      bool: True if the password matches the stored hash, False otherwise.
    """
    passContext = CryptContext(schemes=["bcrypt"])
    return passContext.verify(password, self.passwordHash)


  class Config:
    json_schema_extra = {
        "example": {
            "username": "tonystark",
            "role": "seeker",
            "passwordHash": "hashed_password",
            "createdDate": "2024-09-23"
        }
    }
